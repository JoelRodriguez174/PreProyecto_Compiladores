
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\033\000\002\002\004\000\002\002\007\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\004\006" +
    "\000\002\005\004\000\002\005\002\000\002\006\005\000" +
    "\002\007\003\000\002\007\003\000\002\010\004\000\002" +
    "\010\002\000\002\011\003\000\002\011\003\000\002\012" +
    "\006\000\002\013\005\000\002\013\004\000\002\014\005" +
    "\000\002\014\003\000\002\015\005\000\002\015\003\000" +
    "\002\016\005\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\057\000\010\006\010\007\006\010\007\001\002\000" +
    "\004\002\061\001\002\000\004\011\011\001\002\000\004" +
    "\011\ufffd\001\002\000\004\011\uffff\001\002\000\004\011" +
    "\ufffe\001\002\000\004\020\012\001\002\000\004\021\013" +
    "\001\002\000\004\022\014\001\002\000\014\004\ufffa\006" +
    "\022\007\020\012\ufffa\023\ufffa\001\002\000\004\002\000" +
    "\001\002\000\004\004\057\001\002\000\010\004\026\012" +
    "\025\023\ufff5\001\002\000\004\004\ufff7\001\002\000\014" +
    "\004\ufffa\006\022\007\020\012\ufffa\023\ufffa\001\002\000" +
    "\004\004\ufff8\001\002\000\010\004\ufffb\012\ufffb\023\ufffb" +
    "\001\002\000\010\004\ufff3\012\ufff3\023\ufff3\001\002\000" +
    "\016\004\037\005\035\013\040\014\041\020\042\024\054" +
    "\001\002\000\004\015\034\001\002\000\010\004\ufff4\012" +
    "\ufff4\023\ufff4\001\002\000\010\004\026\012\025\023\ufff5" +
    "\001\002\000\004\023\032\001\002\000\004\002\ufffc\001" +
    "\002\000\004\023\ufff6\001\002\000\014\004\037\005\035" +
    "\013\040\014\041\020\042\001\002\000\012\016\uffea\017" +
    "\uffea\021\uffea\024\uffea\001\002\000\012\016\uffec\017\uffec" +
    "\021\uffec\024\uffec\001\002\000\012\016\uffe9\017\uffe9\021" +
    "\uffe9\024\uffe9\001\002\000\012\016\uffe8\017\uffe8\021\uffe8" +
    "\024\uffe8\001\002\000\012\016\uffe7\017\uffe7\021\uffe7\024" +
    "\uffe7\001\002\000\014\004\037\005\035\013\040\014\041" +
    "\020\042\001\002\000\012\016\uffee\017\050\021\uffee\024" +
    "\uffee\001\002\000\006\016\045\024\046\001\002\000\014" +
    "\004\037\005\035\013\040\014\041\020\042\001\002\000" +
    "\010\004\ufff2\012\ufff2\023\ufff2\001\002\000\012\016\uffef" +
    "\017\050\021\uffef\024\uffef\001\002\000\014\004\037\005" +
    "\035\013\040\014\041\020\042\001\002\000\012\016\uffed" +
    "\017\uffed\021\uffed\024\uffed\001\002\000\006\016\045\021" +
    "\053\001\002\000\012\016\uffeb\017\uffeb\021\uffeb\024\uffeb" +
    "\001\002\000\010\004\ufff0\012\ufff0\023\ufff0\001\002\000" +
    "\006\016\045\024\056\001\002\000\010\004\ufff1\012\ufff1" +
    "\023\ufff1\001\002\000\004\024\060\001\002\000\014\004" +
    "\ufff9\006\ufff9\007\ufff9\012\ufff9\023\ufff9\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\057\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\014\001\001\000\010\005\016\006\020\007\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\010" +
    "\030\011\027\012\026\013\023\001\001\000\002\001\001" +
    "\000\010\005\022\006\020\007\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\014\054" +
    "\015\042\016\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\010\032\011\027\012\026\013\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\014\043\015\042\016\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\014\051\015\042\016\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\015\046\016" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void report_error(String message, Object info) {
        System.err.println("Error sintáctico: " + message);
        if (info instanceof Symbol) {
            Symbol s = (Symbol) info;
            System.err.println("En línea: " + (s.left + 1) + ", columna: " + (s.right + 1));
        }
    }
    
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Programa ::= TipoMain MAIN PARENTESIS_ABRE PARENTESIS_CIERRA Bloque 
            {
              Nodo RESULT =null;
		int tmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Nodo tm = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bloqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bloqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo bloq = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo prog = new Nodo("Programa", null, mleft, mright);
        prog.agregarHijo(tm);
        prog.agregarHijo(new Nodo("Main", null, mleft, mright));
        prog.agregarHijo(bloq);
        RESULT = prog;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // TipoMain ::= VOID 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Nodo("TipoMain","void", vleft, vright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TipoMain",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // TipoMain ::= INT 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Nodo("TipoMain","int", ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TipoMain",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // TipoMain ::= BOOL 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Nodo("TipoMain","bool", bleft, bright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TipoMain",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Bloque ::= LLAVE_ABRE Declaraciones Sentencias LLAVE_CIERRA 
            {
              Nodo RESULT =null;
		int declsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nodo decls = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo stmts = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        Nodo bloque = new Nodo("Bloque", null, decls.linea, decls.columna);
        bloque.agregarHijo(decls);
        bloque.agregarHijo(stmts);
        RESULT = bloque;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bloque",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Declaraciones ::= Declaracion Declaraciones 
            {
              Nodo RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo ds = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo lista = new Nodo("Declaraciones", null, d.linea, d.columna);
        lista.agregarHijo(d);
        lista.agregarHijo(ds);
        RESULT = lista;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaraciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Declaraciones ::= 
            {
              Nodo RESULT =null;
		 RESULT = new Nodo("Declaraciones"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaraciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Declaracion ::= Tipo IDENTIFICADOR PUNTO_COMA 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        Nodo decl = new Nodo("Declaracion", null, idleft, idright);
        decl.agregarHijo(t);
        decl.agregarHijo(new Nodo("Identificador", id, idleft, idright));
        RESULT = decl;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaracion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Tipo ::= INT 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Nodo("Tipo","int", ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Tipo",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Tipo ::= BOOL 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Nodo("Tipo","bool", bleft, bright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Tipo",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Sentencias ::= Sentencia Sentencias 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo ss = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo lista = new Nodo("Sentencias", null, s.linea, s.columna);
        lista.agregarHijo(s);
        lista.agregarHijo(ss);
        RESULT = lista;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencias",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Sentencias ::= 
            {
              Nodo RESULT =null;
		 RESULT = new Nodo("Sentencias"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencias",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Sentencia ::= Asignacion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencia",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Sentencia ::= Return 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = r; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencia",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Asignacion ::= IDENTIFICADOR OPERADOR_ASIGNACION Expresion PUNTO_COMA 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        Nodo asign = new Nodo("Asignacion", null, idleft, idright);
        asign.agregarHijo(new Nodo("Identificador", id, idleft, idright));
        asign.agregarHijo(expr);
        RESULT = asign;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asignacion",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Return ::= RETURN Expresion PUNTO_COMA 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        Nodo ret = new Nodo("Return", null, rleft, rright);
        ret.agregarHijo(e);
        RESULT = ret;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Return",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Return ::= RETURN PUNTO_COMA 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        RESULT = new Nodo("Return","void", rleft, rright);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Return",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Expresion ::= Expresion OPERADOR_SUMA Termino 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo suma = new Nodo("Suma", null, sleft, sright);
        suma.agregarHijo(e1);
        suma.agregarHijo(e2);
        RESULT = suma;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresion",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Expresion ::= Termino 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresion",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Termino ::= Termino OPERADOR_MULTIPLICACION Factor 
            {
              Nodo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nodo t1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo mult = new Nodo("Multiplicacion", null, mleft, mright);
        mult.agregarHijo(t1);
        mult.agregarHijo(f);
        RESULT = mult;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Termino",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Termino ::= Factor 
            {
              Nodo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = f; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Termino",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Factor ::= PARENTESIS_ABRE Expresion PARENTESIS_CIERRA 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Factor ::= NUMERO 
            {
              Nodo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Nodo("Numero", num, numleft, numright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Factor ::= IDENTIFICADOR 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Nodo("Identificador", id, idleft, idright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Factor ::= TRUE 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Nodo("Bool","true", tleft, tright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Factor ::= FALSE 
            {
              Nodo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Nodo("Bool","false", fleft, fright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
